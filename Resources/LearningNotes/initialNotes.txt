In This repo I will be learning Vue.js starting with the fundamentals

Author: Troy Fournier

Vue.js Fundamentals
URL: https://app.pluralsight.com/course-player?course=vuejs-fundamentals&author=jim-cooper&name=138c402b-b8d3-4299-b4d6-e1341e451c40&clip=0&mode=live

Note:
    When picking up from where you leave off start the server again
    npm run serve


Overview
    starting with vue/cli
    Components
    Router
    Managing state
    Directives
    Filters
    Package and Deploy

Getting started with the vue cli
    Will be building Build-a-bot site

The Vue Instance
    Heart of the application 
    Created whenever you call new Vue()
        only used once in a typical vue application

    Usually tell it to render a component
    ex
        new Vue({render: h => h(App)})

    App will become the top level component in a hierarchy call Vue Structure

    wraps entire application, inside that will be app component
        App can have child component, which may have child components

    App will contain router vue which shows content for current URL
        as url changes it updates the content inside the router view

Setting up the environment
    install node
        Mac: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash

    nvm install 8.11.2
        using same version as course

    nvm use 8.11.2

Creating a new project with the vue cli
    Vue CLI recommended when creating a project to be deployed
        vue team has designed it to allow optimization for production

Generate project
    vue create build-a-bot
        creats a new vue project in the specified directory. In this case the build-a-bot directory

    allows for choosing features and installs npm depenencies

    setup eslint

Package.json
    brought in 3 scripts for us that call the vue cli server

    vue cli service manages a local dev webserver based on webpack
        more in another course

    npm run serve
        compiles application for development
        runs server for us on port 8080

    runs sample webpage for us

Main.js
    entry point for vue application

    creates a new vue Instance
    passes in options object

    configuring render property
        set to a function that is getting App component passed to it

App.js
    3 components to file
        Template
        Script
        Style

    Vue specific wepack plugin being used to parse file into indivdual parts and compile in a way a browser can use them
    Passed into vue instance so vue works with webpack to render

    This is the top level component in our App
        used to display route components and child components

    App is displaying HelloWorld as a child component
        components>HelloWorld.vue

Creating the Home Page
    replace generated content with our own
    Get us more familiar with what CLI generated

    Vue style guide rule
        Components should be two words at a minimum
    
    App element is refering to the div in the template with id="app"

    didn't need to hit refresh because vue cli is using webpack dev server including hot module replacement

Module 2
    Creating components
    Using bindings to display and handle events
    Conditionally displaying elements
        v-if and v-show
    Repeating elements with v-for
    Styling components
    Working with component lifecycle hooks
    Reducing duplication with mixins

Global Components vs Single-file Components

Components
    Really just another view instance
    easiest way to get something to render:
        new Vue({
            template: ''<div>Hello World</div>',
            el: '#app',
        });

        Creating a new instance of view
        Passing in a options object with a hello world template
        line 127 tells vue which element of the page to mount the template in

Global Components
    const World = Vue.component(
        'World',
        { template: '<span>World</span>' },
    );
    passing in the component name 'World'
    and the option object

Components are really just vue instances, with exception of the options object you pass in to the new component has the exact same properties as the one you pass in to a view instance

can now:
    new Vue({
            template: ''<div>Hello <World /></div>',
            el: '#app',
        });

World component is a Global Component
    just a World constant you can use anywhere you want.
    Useful in smaller applications and prototyping

Limitations
    Hard to locate
    Use string templates all HTML must be defined in Javascript string
    CSS is not encapsulated
    No build time compilation support

Single-file Components
    file with a .vue extension 
    
    typically 3 sections
        Template
            required
        Script
            required
        Style
            optional

Template section
    Where we define HTML template

Script section
    define Javascript functionality of component
    export it so it can be imported else where

Style Section
    where we define css

vue files compiled by webpack at runtime to create JS, CSS, and HTML files for the browser

App.vue is a Single-file component

Creating your First Component

    Created robot builder component
        all we have done is export it and use it in the App.vue

Binding Attributes to Data with v-bind

    component options need a data function to have data provided to a component

    made a data folder
    made a json file that contains all of the parts data in the data folder
        mostly json data

    first line parts.js
    const images = require.context('./images', true, /\.png$/);

    require.context makes webpack aware of the image urls so that we can use them throughout the json data as realative urls
    other than that all json

    parts object is a constant that is exported at the bottom

    parts object is an object that is comprised of objects for heads, arms, bases, and torsos that are all arrays of the specific parts

    component needs to import this data
        ex  
        import avaiableParts from '../data/parts.js';

    return the avaiableParts as part of the data object
        return {
            avaiableParts,
        };

Using data in the template
    Some directives can take an "argument" denoted by a colon after the direcrtive name
    v-bind
        used to reactively update an HTML attribute
        binds attribute to data
    ex
        <img v-bind:src="availableParts.heads[0].src" title="head"/>
        allows us to use the data that was provided to us in avaiableParts

Binding to events with v-on
    v-on
        listens to DOM events and runs JavaScript when they're triggered

methods
    object passed to the component options

Vue calls selectNextHead function via v-on
function increments the data
binding updates the attribute using it

Helper functions can be written in the script section of components before the export
    same place imports happen

Using Shorthand Bindings
    v-bind
        : shorthand for it
    v-on
        @ shorthand for it

Binding to Computed Properties
    don't do computed properties in template

Computed
    option on the component that contains methods

    use in script (move it into the component)
    computed: {

    },

Displaying Data with Interpolation
    displaying an attribute (name) of a computed property

    double brackets used for Interpolation
        {{}}
    can place valid expressions in the doubl brackets

v-once
    any bindings in element is only rendered once
    good for performance
    use on things that will not change

Conditionally displaying content with v-if and v-show

v-if
    the element is removed from the DOM if the condition evaluates to false

v-show
    display none is added to the element if the condition in v-show evaluates to false

v-show is used when the content being shown and hidden is expensive to calculate and hidden or show frequently
    efficenecy thing

Repeating Elements with v-for


Vues change detection works by hooking into the getters and setters of properties in the data property
    data must be in the data function if you want a change to happen on the page when the data changes

Object.assign
    good javascript programming practice that avoids inadvertent pointers to the same object instance

v-for
    goes on an element
    get a new element for each loop
    works like foreach
    ex
        <tr v-for="robot in cart">
        </tr>

    robot can be used as a variable within this element

    When ever you are repeating data vue needs to be able to identify each element in there for updates
        thus need a unique key attribute for repeated data
    ex  
        <tr v-for="(robot, index) in cart" :key="index">
            <td>
                {{ robot.head.title }}
            </td>
            <td class="cost">
                {{ robot.cost }}
            </td>
        </tr>
        we can get the index of the robot with the (robot, index)
        we then bind this index to the key with a v-bind

performance warning
    never use v-for and v-if on the same element

    if you need to hide and show data on v-for need to internal element or something like that

Styling Components
    Can use the style section to style components

index.html
    generated by the cli
    body element lives here
    this file is loaded when app first loads

    it contains app element that render function is binding to

scoped
    attribute on style tag
    sets the styles in style element to be restricted to the component the style element is a part of

    is adding hashed data attributes
        then styles in the components are only added to the elements that have the data attribute

Global styles
    should only be in top level component

Components can have multiple style blocks
    one scoped
    one global

Styling Child Components
    scoped style vue will not apply styles to elements out of scoped
    however, css inhieritance can still apply

    number of css properties that get inhiered

    style a parent component that wraps a child component can cause css inheirtance to apply styles to child components

    you can use the root component of the child component to apply styles to child components

>>> Deep Selector
    can target specific elements of child class from the parent by using class of the child component root >>> then class name
    this goes down to all children below parent
    ex
        .content >>> .robot-name

Conditionally Applying Styles with Style Bindings
    simply binding to the style attribute

    css attributes that have '-' require square brackets in when doing this
        b/c this is object notation
    ex  
        :style="{[background-color]: 'red'}"
    OR
        Vue allows use of camelCase for this

    can set attribute of style to a computed value to make it conditional
        the computed value returns object notation of the style attribute you want

    Can send an array to the style attribute you bound to
        first ele of array will be overridden by following styles
    ex  
        :style="[computedValueOne, computedValueN]"

Conditionally Applying Classes with Class Binding
    binding where keys are the class you want to toggle
    set it to a boolean expression that evaluates to true when you want the class applied
    ex
        :class="{'sale-border': selectedRobot.head.onSale}"    

    Add property for every class you want to toggle

    Can move above to computed property

    Array Syntax
        can place multiple in an array and all will be applied
    ex
        :class="[saleBorderClass, 'top', 'part']"

        saleBorderClass is a computed property that returns a class string when a condition is methods

        'top' and 'part' are always applied as they are just class strings

Using SASS and other CSS pre-processors
    cmd:
    npm install node-sass sass-loader --save-dev

    specify language in style tag
    ex
        <style lang="scss" scoped>
        </style>

Using Component Lifecycle Hooks
    can take action based on lifecycle states of a component

    typical use case
        fetch data from API when component is first created

    Created 
        add created function in export

    Handful of lifecycle hooks
        https://vuejs.org/v2/guide/instance.html
        diagram in above documentation

Mixins
    way to share functionality across multiple components

    any component option can be extracted out into a mixin file
    when mixin is imported they will be merged into the rest of your component options

    created-hook-mixin.js
        simply exports and object

    to use import it
    import createdHookMixin from './created-hook-mixin';

    then add it to the mixins array
    mixins: [createdHookMixin],

    can be used in multiple components

    can use a mixin to share any component options across many components
        including lifecycle hooks, props, computed propertier ect.

Summary Module 3
    Creating components
    Using bindings to display data and handle events
    ...

Module 4
Intercomponent Communication
    Using props to share data with child components
    Validating components with props
    Passing data to parents components with events
    Injecting content into a child component with slots

Creating Child Components
    refactoring part selector code into child component

    ie
        <div class="left part">
            <img :src="selectedRobot.leftArm.src" title="left arm"/>
            <button @click="selectPreviousLeftArm()" class="prev-selector">&#9650;</button>
            <button @click="selectNextLeftArm()" class="next-selector">&#9660;</button>
        </div>

    taking above and moving it into its own component with data passed into it from robot builder

    when referencing a child component it must be imported and listed as a component in the components option of the parent
        this makes the parent component aware of and able to be used in its template
    ex  
        shorthand
        components: { PartSelector },
        long
        components: { PartSelector: PartSelector },

Using Props to Share Data with Child Components
    bind data from the parent to an attribute of the child  
        need to create the attribute on the child
    
    props: []
        used to add attributes to a component
        ex
            props: ['parts'],

    Not all attributes need binding only ones that are attributes that are getting expressions passed along

Validating Props
    prevent parents components from passing in bad data

    use a key object for props instead of array
        keys are the names of the props
        values are objects that specify validation information

    Error will now show on browser console warning of invalid data type on a prop

    can also make props required

Validator Function
    specifies what a specific prop can be
    ex
        string can not be blank
        validator(value) {
            return ['left', 'right', 'top', 'bottom', 'center'].includes(value);
        },
        placed on the prop

Passing Data to Parent Component with Events
    Create events in the child component that the parent component can bind to

$emit
    causes the component to 'emit' and event on itself to binded listeners
    ex 
        this.$emit('partSelected', this.selectedPart)

        a parent component can now bind to the partSelected event when it created the component
        passes this.selectedPart up to the parent

    parents bind to emit event with v-on
        just like any other event
    ex
        @partSelected="<inline or function>"

        inline
        @partSelected="part => selectedRobot.head=part"/>

Updated()
    lifecycle hook called whenever the data for the component is updated

Injecting Content into a Child Component with slots

<slot></slot>
    vue specific element
    content that is placed inside of the component with the slot element will be placed where the <slot></slot> is in the component

     default content can be provided to a slot
        place content in between the slot tags on the component

Summary Module 4
    ...

Routing from Page to Page
    Adding routing to app
    Linking to routed pages
    Styling links based on the active route
    Navigating from code
    Working with route params
    Using nested routes
    Using named views
    Enabling HTML5 History mode
    Preventing navigation with navigation guards

Adding Routing to your App
    npm install vue-router --save
        install view router via the cli in a vue project

    need a place to define all of the routes in the app
        creating router folder

    index.js file  
        import Vue from 'vue';
        import Router from 'vue-router';

        Vue.use(Router);

        export default new Router({
            place routes here
        });
    lets vue know the app will be using routing

Router with routes
    export default new Router({
        routes: [{
            path: '/',
            name: 'Home',
            component: HomePage,
        }],
    });
    tells vue when on the url ('/') then load the specified component (HomePage)
    the name is used in code to navigate to the route

Need to pull routes in when we create vue instance so that vue is aware of them
    add it to the vue configuration object

Must tell App where to display routed components

<router-view></router-view>
    displays the component that matches the current route

Vue adds a hashtag to URL ad navigates based on what after that
    this will be removed later with HTML 5 history mode

Linking to Routed Pages
    <router-link></router-link>
        vue specific element to link to a routed page

    ex
        <router-link :to="{name: 'Home'}">
    use binding to access the route via the route name

    <router-link to="/build">
    can also use hard coded strings of the url you want

Styling Links Based on the Active Route

.router-link-active
    special vue class that is applied to any link that matches the current route
    by default this is an inclusive match on the route

    can add exact attribute on router-link to match route exactly for Styling

    can use active-class="" attribute if you don't want to use the .router-link-active class

Navigating from Code
    this.$router
        available on any component when you pass a router into the Vue instance

    .push('url to nav to ')
        sends to the specified url

    ex
        this.$router.push('/part');
    sends site the the /part url
    this example uses a string url can alternatively pass on object

Working with Route Params
    :<varName>
        used in routes file to specify router params
    ex 
        {
            path: '/parts/:partType/:id',
            name: 'Parts',
            component: PartInfo,
        },
    partType and id are vars

    route params are avaiable on the components route property
    ex
        this.$route.paramName

Destructuring
    this:
        const partType = this.$route.params.partType;
        const id = this.$route.params.id;
    can become
        const { partType, id } = this.$route.params;

    that is Destructuring params are assigned to the vars in order

Params that are pulled off of a url are always strings

Must use object syntax to pass Route Params

Navigating from Code with Route Params
    ex
        <img @click="showPartInfo()" :src="selectedPart.src" title="arm"/>
        showPartInfo() {
        this.$router.push({
            name: 'Parts',
            params: {
            id: this.selectedPart.id,
            partType: this.selectedPart.type,
            },
        });
        },

Passing Params as Props
    const { partType, id } = this.$route.params;
        downside couples component to the router

    Can make it work as a routed component and a child component by passing the params as props
        set the props property to true on the route

props: true,
    router property
    tells vue to pass the route params as props to the component

    in the component you can now get the params off of this instead of this.$route.params

    can add validation to the props this way
        by making the props an object containing the params

Nested Routes
    Allow portion of page to be rerender and change the url

    Using another router-view in the component
        add another route that consists of a parent route for the BrowseParts Page and a child route for the type of part

    this route needs to go above the /parts/:partType/:id route

    reason:
        {
            path: '/parts/browse',
            name: 'BrowseParts',
            component: BrowseParts,
        },
        {
            path: '/parts/:partType/:id',
            name: 'Parts',
            component: PartInfo,
            props: true,
        },
    Vue has no idea that 'browse' isn't a part type so its needs to go first so that it can match before reaching the second /parts/:partType

    order is important

    child route ex:
    {
      path: '/parts/browse',
      name: 'BrowseParts',
      component: BrowseParts,
      children: [
        {
          name: 'BrowseHeads',
          path: 'heads',
          component: RobotHeads,
        },
        {
          name: 'BrowseArms',
          path: 'arms',
          component: RobotArms,
        },
      ]
    }
    add the children array to a route

    the paths for the child routes are relative to the parent
    ex
        absoulte path for arms /parts/browse/arms

    child route router-link ex
        <router-link :to="{name: 'BrowseHeads'}">Heads</router-link>
    can simply use the name of the child route when binding

Using Named Views
    think of as sibling routes
    allow multiple router views on the same component
        the route specifies which two or more vues to display

    router-view s that are not given a name by default have the name default

    components property get added to the route
        this replaces component

        it takes a keyed object with the keys being the router-view names and the values being the component to display
    ex  
        {
            path: '/',
            name: 'Home',
            components: {
                default: HomePage,
                sidebar: SidebarStandard,
            },
        },

    feel like more depth could be needed on this

Enabling HTML5 History Mode
    hashtag is in urls because HTML5 history mode is off

    how to turn off
        mode: 'history',

        needs to be set in the router config object
            in index.js (router file)

    Consequence
        causes the full url to be sent to the server

        because server has no files at the full url in its directory it will 404

    hashtag causes only the part before the hashtag to be send to the server with the rest handled client sidebar
        this works because vue doesn't have anything at the directory of the full url. but it does have index files that know how to handle it

    Solution
        set up server to always return the main index.html file whenever you load in a url

        more on this in deploying to production

Preventing pages from Loading with Navigation Guards
    allow you to prevent a page from or prevent a user from leaving a page based on specific criteria

Before Enter Guard
    prevent page from loading if :id in route param isn't a number

    different from validation as validation still loads the page and only throws a dev warning

    can add a route-guard on a component or a route

    how to add on a route
        add a beforeEnter() on the keyed route object
    
    beforeEnter(to, from, next)
        to:
            the route to navigate to
        from:
            the route you are navigating from
        next function
            called with a value of true to allow navigation
            called with a value of false to stop navigation

        can get params from the to route
        
    ex
        {
            path: '/parts/:partType/:id',
            name: 'Parts',
            component: PartInfo,
            props: true,
            beforeEnter(to, from, next) {
                const isValidId = Number.isInteger(Number(to.params.id));
                next(isValidId);
            },
        },

Preventing Navigation Away From Pages With Navigation Guard 
    Can be on the route or the component

    example we will do needs information from the component so we will make it on the component

beforeLeave()
    when adding on a component it becomes beforeRouteLeave()
        same thing for Enter

    to, from, next
        params

Summary Module 5
    Adding routing to app
    Linking to routed pages
    Styling links based on active route
    Navigatin from code
    ...



